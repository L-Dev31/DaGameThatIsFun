Analyse entierement les fichiers html js et py (que je donnerais apr√®s) suivant qui constitue l'entieret√© de mon projet:

index.html:

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Party Game Lobby</title>
  <link rel="stylesheet" href="/static/style.css">
  <link rel="stylesheet" href="/static/mobile_style.css">
  <link rel="stylesheet" href="/static/lobby_style.css">
  <link rel="icon" type="image/png" href="/static/images/favicon/favicon.png">
</head>
<body>
  <button class="share-control" id="shareToggle">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 30" width="24px" fill="white" height="24px">
      <path d="M 23 3 A 4 4 0 0 0 19 7 A 4 4 0 0 0 19.09375 7.8359375 L 10.011719 12.376953 A 4 4 0 0 0 7 11 A 4 4 0 0 0 3 15 A 4 4 0 0 0 7 19 A 4 4 0 0 0 10.013672 17.625 L 19.089844 22.164062 A 4 4 0 0 0 19 23 A 4 4 0 0 0 23 27 A 4 4 0 0 0 27 23 A 4 4 0 0 0 23 19 A 4 4 0 0 0 19.986328 20.375 L 10.910156 15.835938 A 4 4 0 0 0 11 15 A 4 4 0 0 0 10.90625 14.166016 L 19.988281 9.625 A 4 4 0 0 0 23 11 A 4 4 0 0 0 27 7 A 4 4 0 0 0 23 3 z"/>
    </svg>
  </button>
  <button class="sound-control" id="soundToggle">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
      <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
      <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
    </svg>
  </button>
  <div id="qrCodeModal" class="modal-overlay">
    <div class="modal-container">
      <h2 class="modal-title">Partager le lien</h2>
      <div class="modal-content">
        <p id="qrCodeUrl" style="word-break: break-all; margin-bottom: 1rem;"></p>
        <img id="qrCodeImage" alt="QR Code" style="width: 200px; height: 200px; margin: 0 auto;">
        <div style="margin-top: 1rem; text-align: center;">
          <button onclick="copyLink()" class="modal-button modal-button-secondary">Copier le lien</button>
        </div>
      </div>
      <div class="modal-buttons">
        <button class="modal-button modal-button-primary" onclick="hideModal('qrCodeModal')">Fermer</button>
      </div>
    </div>
  </div>
  <div class="bg"></div>
  <div id="introScreen" class="intro-screen">
    <div class="intro-content">
      <img src="/static/images/logo/logo.png" alt="Party Game Logo" class="intro-logo">
      <p class="intro-text">Avertissement !</p>
    </div>
    <div class="security-text">
      Veuillez noter que ce jeu peut contenir du contenu grossier ou inappropri√© pour certains publics.<br><br>
      Ce n‚Äôest en aucun cas notre intention de blesser quiconque, il s‚Äôagit simplement d‚Äôun jeu con√ßu pour s‚Äôamuser et rire ensemble :)
    </div>
  </div>
  <div class="logo-container">
    <img src="/static/images/logo/logo.png" alt="Party Game Logo" class="logo">
  </div>
  <div class="container">
    <div class="grid">
      <div>
        <div class="game-buttons">
          <button class="game-button active" data-game="draw-contest">
            <img src="/static/images/logo/draw-contest.png" alt="Draw Contest" class="game-logo">
          </button>
          <button class="game-button" data-game="pictionary">
            <img src="/static/images/logo/pictionary.png" alt="Pictionary" class="game-logo">
          </button>
          <button class="game-button" data-game="quiz-rush">
            <img src="/static/images/logo/quiz-rush.png" alt="Quiz Rush" class="game-logo">
          </button>
          <button class="game-button" data-game="object-tales" disabled>
            <img src="/static/images/logo/object-tales-disabled.png" alt="Object Tales" class="game-logo">
          </button>
        </div>
      </div>
      <div class="preview-card">
        <div class="tv-static"></div>
        <img src="/static/images/preview/draw-contest.png" alt="Game Preview" class="preview-image" id="previewImage">
        <div class="preview-content">
          <h3 class="preview-title" id="previewTitle">Dessine moi un D√©sastre</h3>
          <p class="preview-description" id="previewDescription">
            Une phrase loufoque, des dessins absurdes, et un vote pour √©lire l'≈ìuvre la plus iconique. √Ä vos pinceaux, le massacre commence !
          </p>
          <p class="preview-player-number" id="previewPlayerNumber">4-8 Joueurs</p>
          <button class="preview-button">Lancer le jeu !</button>
        </div>
      </div>
    </div>
    <div class="bottom-actions">
      <a href="create_lobby.html" id="createLobbyLink">
        <button class="action-button create-lobby">
          <svg class="button-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M12 5v14M5 12h14"></path>
          </svg>
          <span class="button-text">Cr√©er Lobby</span>
        </button>
      </a>
      <a href="join_lobby.html" id="joinLobbyLink">
        <button class="action-button join-lobby">
          <svg class="button-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
            <circle cx="9" cy="7" r="4"></circle>
            <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
            <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
          </svg>
          <span class="button-text">Rejoindre</span>
        </button>
      </a>
      <a href="credits.html" id="creditsLink">
        <button class="action-button credits">
          <svg class="button-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="8" r="7"></circle>
            <polyline points="8.21 13.89 7 23 12 20 17 23 15.79 13.88"></polyline>
          </svg>
          <span class="button-text">Credits</span>
        </button>
      </a>
    </div>
  </div>
  <div id="playersContainer" class="players-container" style="display:none;"></div>
  <audio id="staticSound" src="/static/music/tv-static.mp3"></audio>
  <script type="module" src="javascript/index.js"></script>
</body>
</html>


index.js:
import LobbyManager from './lobby_manager.js';
import { navigateLobby } from './lobby_redirection.js';

document.addEventListener("DOMContentLoaded", async () => {
  const playersContainer = document.getElementById("playersContainer");

  async function updatePlayers() {
    const players = await LobbyManager.getActivePlayers();
    playersContainer.innerHTML = "";
    players.forEach(player => {
      const playerDiv = document.createElement("div");
      playerDiv.classList.add("player");
      playerDiv.innerHTML = `
        <img src="${player.avatar}" alt="${player.name}" class="player-avatar">
        <span class="player-name">${player.name}${player.isCurrentUser ? ' (Vous)' : ''}${player.isOwner ? ' üëë' : ''}</span>
      `;
      playersContainer.appendChild(playerDiv);
    });
  }
  await updatePlayers();
  setInterval(updatePlayers, 5000);

  const introScreen = document.getElementById("introScreen");
  setTimeout(() => {
    introScreen.classList.add("hidden");
    setTimeout(() => {
      introScreen.style.display = "none";
    }, 1000);
  }, 8000);

  const staticSound = document.getElementById("staticSound");
  const staticEffect = document.querySelector(".tv-static");
  const soundToggle = document.getElementById("soundToggle");
  let isMuted = true;
  const audio = new Audio("/static/music/draw-contest.mp3");
  audio.loop = true;

  function updateSoundIcon() {
    if (isMuted) {
      soundToggle.innerHTML = `
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
          <line x1="23" y1="9" x2="17" y2="15"></line>
          <line x1="17" y1="9" x2="23" y2="15"></line>
        </svg>`;
    } else {
      soundToggle.innerHTML = `
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
          <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
          <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
        </svg>`;
    }
  }
  soundToggle.addEventListener("click", () => {
    isMuted = !isMuted;
    if (isMuted) {
      audio.pause();
    } else {
      audio.play().catch(console.error);
    }
    updateSoundIcon();
  });
  updateSoundIcon();

  const games = {
    "draw-contest": {
      title: "Dessine moi un D√©sastre",
      description: "Une phrase loufoque, des dessins absurdes, et un vote pour √©lire l'≈ìuvre la plus iconique. √Ä vos pinceaux, le massacre commence ! \n 4 √† 8 Joueurs",
      preview: "/static/images/preview/draw-contest.png",
      music: "/static/music/draw-contest.mp3",
      playerNumber: "4-8"
    },
    "pictionary": {
      title: "Gribouilles & Embrouilles",
      description: "Montrez vos talents artistiques ! Un joueur dessine pendant que les autres se d√©p√™chent de deviner le mot.",
      preview: "/static/images/preview/banner.png",
      music: "/static/music/pictionary.mp3",
      playerNumber: "2-8"
    },
    "quiz-rush": {
      title: "Quiz Rush",
      description: "Pensez vite ! R√©pondez √† des questions originales dans ce quiz effr√©n√©.",
      preview: "/static/images/preview/quiz-rush.png",
      music: "/static/music/quiz-rush.mp3",
      playerNumber: "2-8"
    },
    "object-tales": {
      title: "La Qu√™te L√©gendaire",
      description: "Devenez le ma√Ætre du r√©cit ! Inventez l'histoire la plus dr√¥le ou intrigante √† propos d'un objet √©trange.",
      preview: "/static/images/preview/object-tales.png",
      music: "/static/music/object-tales.mp3",
      playerNumber: "4-8",
      disabled: true
    }
  };

  function changeGamePreview(gameId) {
    const game = games[gameId];
    if (!game) return;
    staticEffect.classList.add("show-static");
    staticSound.currentTime = 0;
    staticSound.play();
    setTimeout(() => {
      document.getElementById("previewImage").src = game.preview;
      document.getElementById("previewTitle").textContent = game.title;
      document.getElementById("previewDescription").textContent = game.description;
      document.getElementById("previewPlayerNumber").textContent = game.playerNumber + " Joueurs";
      if (audio.src !== game.music) {
        audio.src = game.music;
        audio.load();
        if (!isMuted) {
          audio.play().catch(console.error);
        }
      }
      staticEffect.classList.remove("show-static");
    }, 200);
  }

  document.querySelectorAll(".game-button").forEach(button => {
    button.addEventListener("click", () => {
      if (button.disabled) return;
      changeGamePreview(button.dataset.game);
      document.querySelectorAll(".game-button").forEach(btn => btn.classList.remove("active"));
      button.classList.add("active");
    });
  });

  const roomCode = localStorage.getItem("roomCode");
  if (roomCode) {
    document.getElementById("playersContainer").style.display = "block";
    const createLobbyLink = document.getElementById("createLobbyLink");
    const joinLobbyLink = document.getElementById("joinLobbyLink");
    const creditsLink = document.getElementById("creditsLink");

    const isOwner = await LobbyManager.isCurrentUserOwner();

    createLobbyLink.innerHTML = `
      <button class="action-button ${isOwner ? 'quit-lobby' : ''}" ${!isOwner ? 'disabled' : ''}>
        <svg class="button-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M18 6L6 18"></path>
          <path d="M6 6l12 12"></path>
        </svg>
        <span class="button-text">Quitter</span>
      </button>
    `;

    joinLobbyLink.innerHTML = `
      <button class="action-button add-players" ${!isOwner ? 'disabled' : ''}>
        <svg class="button-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M12 5v14"></path>
          <path d="M5 12h14"></path>
        </svg>
        <span class="button-text">Aj. Joueurs</span>
      </button>
    `;

    creditsLink.removeAttribute("href");

    if (isOwner) {
      createLobbyLink.querySelector(".quit-lobby").addEventListener("click", async () => {
        if (confirm("√ätes-vous s√ªr de vouloir quitter le lobby ?")) {
          await LobbyManager.leaveLobby();
          window.location.reload();
        }
      });

      joinLobbyLink.querySelector(".add-players").addEventListener("click", () => {
        navigateLobby(`waiting_room.html?roomCode=${roomCode}`);
      });
    }
  }
});


lobby_manager.js:
class LobbyManager {
    static POLL_INTERVAL = 5000; 
    static MAX_POLL_INTERVAL = 30000; 
    static POLL_BACKOFF_FACTOR = 1.5; 

    static _currentPollInterval = this.POLL_INTERVAL;
    static _pollTimeout = null;
    static _listeners = new Set();

    static startPolling() {
        this._pollLobby();
    }

    static stopPolling() {
        if (this._pollTimeout) {
            clearTimeout(this._pollTimeout);
            this._pollTimeout = null;
        }
    }

    static addListener(callback) {
        this._listeners.add(callback);
        return () => this._listeners.delete(callback);
    }

    static async _pollLobby() {
        try {
            const lobby = await this.getCurrentLobby();
            if (lobby) {
                this._currentPollInterval = this.POLL_INTERVAL;
                this._notifyListeners(lobby);
            } else {
                console.error("Lobby not found, stopping polling.");
                this.stopPolling();
                return;
            }
        } catch (error) {
            console.error('Polling error:', error);
            this._currentPollInterval = this.MAX_POLL_INTERVAL;
        } finally {
            if (this._pollTimeout !== null) {
                this._pollTimeout = setTimeout(() => this._pollLobby(), this._currentPollInterval);
            }
        }
    }

    static _notifyListeners(lobby) {
        for (const listener of this._listeners) {
            listener(lobby);
        }
    }

    static async getCurrentLobby() {
        const roomCode = localStorage.getItem('roomCode');
        const userId = localStorage.getItem('userId');
        if (!roomCode || !userId) return null;
        try {
            const response = await fetch(`/api/lobby/${roomCode}`);
            if (!response.ok) {
                console.error('Lobby not found');
                return null;
            }
            const data = await response.json();
            return {
                ...data,
                isOwner: data.owner === userId,
                currentUser: data.users[userId],
            };
        } catch (error) {
            console.error('Lobby fetch error:', error);
            return null;
        }
    }

    static async isCurrentUserOwner() {
        const lobby = await this.getCurrentLobby();
        return lobby?.isOwner || false;
    }

    static async leaveLobby() {
        const roomCode = localStorage.getItem('roomCode');
        const userId = localStorage.getItem('userId');
        if (roomCode && userId) {
            try {
                await fetch(`/api/lobby/${roomCode}/leave`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId }),
                });
            } catch (error) {
                console.error('Leave lobby error:', error);
            }
        }
        localStorage.removeItem('roomCode');
        localStorage.removeItem('userId');
        this.stopPolling();
    }

    static async sendCommandToPlayers(command, payload = {}) {
        const roomCode = localStorage.getItem('roomCode');
        const lobby = await this.getCurrentLobby();
        if (lobby?.isOwner) {
            try {
                await fetch(`/api/lobby/${roomCode}/command`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        command,
                        payload,
                        timestamp: Date.now(),
                    }),
                });
            } catch (error) {
                console.error('Command send error:', error);
            }
        }
    }

    static async getActivePlayers() {
        const userId = localStorage.getItem('userId');
        const lobby = await this.getCurrentLobby();
        if (lobby) {
            const sortedUsers = Object.values(lobby.users)
                .sort((a, b) => a.join_time - b.join_time)
                .map((user) => ({
                    id: user.id,
                    name: user.name,
                    avatar: `/static/images/avatar/${user.avatar_index + 1}.png`,
                    isOwner: user.id === lobby.owner,
                    isCurrentUser: user.id === userId
                }));
            return sortedUsers;
        }
        return [];
    }
}

export default LobbyManager;

lobby_redirection.js:

import LobbyManager from './lobby_manager.js';

export async function navigateLobby(url) {
  if (url.includes("waiting_room.html")) {
    await LobbyManager.sendCommandToPlayers('return-to-waiting', {});
  } else {
    await LobbyManager.sendCommandToPlayers('redirect', { url });
  }
  window.location.href = url;
}

waiting_room.js:
import LobbyManager from './lobby_manager.js';

let isOwner = false;
const userId = localStorage.getItem('userId');
const roomCode = localStorage.getItem('roomCode');

if (!roomCode || !userId) {
  window.location.href = document.referrer || '/';
}

const modal = document.getElementById('confirmationModal');
const leaveButton = document.getElementById('leaveButton');
const cancelButton = document.getElementById('cancelButton');
const confirmButton = document.getElementById('confirmButton');
const modalMessage = document.getElementById('modalMessage');

function showModal(message, ownerLeaving = false) {
  modalMessage.textContent = message;
  modal.classList.add('active');
  confirmButton.onclick = async () => {
    if (ownerLeaving) {
      await LobbyManager.sendCommandToPlayers('lobby-deleted');
      await LobbyManager.leaveLobby();
      window.location.href = '/';
    } else {
      await LobbyManager.leaveLobby();
      window.location.href = '/';
    }
  };
}

function hideModal() {
  modal.classList.remove('active');
}

leaveButton.addEventListener('click', () => {
  const message = isOwner 
    ? "Attention ! Si vous quittez, le salon sera supprim√©. Continuer ?" 
    : "Quitter le salon ?";
  showModal(message, isOwner);
});
cancelButton.addEventListener('click', hideModal);
modal.addEventListener('click', (e) => { if (e.target === modal) hideModal(); });

function updatePlayersGrid(users, ownerId) {
  const playersGrid = document.getElementById('playersGrid');
  playersGrid.innerHTML = '';
  const currentUserId = localStorage.getItem('userId');
  const sortedUsers = Object.values(users).sort((a, b) => {
    if (a.id === ownerId) return -1;
    if (b.id === ownerId) return 1;
    return a.join_time - b.join_time;
  });
  for (let i = 0; i < 8; i++) {
    const playerSlot = document.createElement('div');
    playerSlot.classList.add('player-slot');
    if (i < sortedUsers.length) {
      const user = sortedUsers[i];
      playerSlot.innerHTML = `
        <div class="player-avatar${user.id === currentUserId ? ' current-player' : ''}">
          <img src="/static/images/avatar/${user.avatar_index + 1}.png" alt="${user.name}">
        </div>
        <span class="waiting-text">
          <strong>${user.name}</strong>
          ${user.id === ownerId ? ' üëë' : ''}
          ${user.id === currentUserId ? ' (Vous)' : ''}
        </span>`;
    } else {
      playerSlot.innerHTML = `
        <div class="player-avatar empty">
          <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="#9ca3af" stroke-width="2">
            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
            <circle cx="12" cy="7" r="4"></circle>
          </svg>
        </div>
        <span class="waiting-text">En attente...</span>`;
    }
    playersGrid.appendChild(playerSlot);
  }
}

function updateStartButton(userCount, maxPlayers) {
  const startButton = document.getElementById('startButton');
  startButton.textContent = `Lancer la partie (${userCount}/${maxPlayers})`;
  startButton.disabled = !isOwner || userCount < 2;
}

let countdownInterval;
function startCountdown(duration) {
  const countdownOverlay = document.getElementById('countdownOverlay');
  const countdownNumber = document.getElementById('countdownNumber');
  const cancelCountdown = document.getElementById('cancelCountdown');
  countdownOverlay.style.display = 'flex';
  let counter = duration;
  cancelCountdown.style.display = isOwner ? 'block' : 'none';
  countdownNumber.textContent = counter;
  countdownInterval = setInterval(() => {
    counter--;
    if (counter < 0) counter = 0;
    countdownNumber.textContent = counter;
    if (counter <= 0) {
      clearInterval(countdownInterval);
      LobbyManager.sendCommandToPlayers('redirect', { url: `index.html?roomCode=${roomCode}` });
      window.location.href = `index.html?roomCode=${roomCode}`;
    }
  }, 1000);
}

function cancelCountdownGlobal() {
  clearInterval(countdownInterval);
  document.getElementById('countdownOverlay').style.display = 'none';
}

function setupCommandListener() {
  let lastCommandTime = 0;
  setInterval(async () => {
    const lobby = await LobbyManager.getCurrentLobby();
    const command = lobby?.latest_command;
    if (command && command.timestamp > lastCommandTime) {
      lastCommandTime = command.timestamp;
      switch (command.command) {
        case 'start-countdown':
          if (!isOwner) startCountdown(command.payload.duration);
          break;
        case 'cancel-countdown':
          cancelCountdownGlobal();
          break;
        case 'redirect':
          window.location.href = command.payload.url;
          break;
        case 'lobby-deleted':
          alert('Le salon a √©t√© supprim√© par l\'h√¥te !');
          window.location.href = '/';
          break;
        case 'return-to-waiting':
          window.location.href = `waiting_room.html?roomCode=${roomCode}`;
          break;
      }
    }
  }, 1000);
}

async function checkOwnerStatus() {
  const lobby = await LobbyManager.getCurrentLobby();
  if (!lobby) {
    window.location.href = '/';
    return;
  }
  isOwner = lobby.isOwner;
  updatePlayersGrid(lobby.users, lobby.owner);
  updateStartButton(Object.keys(lobby.users).length, lobby.max_players || 8);
}

async function handleCountdown() {
  if (!isOwner) return;
  await LobbyManager.sendCommandToPlayers('start-countdown', { duration: 5 });
  startCountdown(5);
}

document.addEventListener('DOMContentLoaded', async () => {
  document.getElementById('roomCode').textContent = roomCode;
  await checkOwnerStatus();
  setupCommandListener();
  setInterval(checkOwnerStatus, 1000);
  document.getElementById('startButton').addEventListener('click', () => {
    if (isOwner) handleCountdown();
  });
});

window.addEventListener('beforeunload', async () => {
  if (isOwner) {
    const redirectData = JSON.stringify({ command: 'redirect', payload: { url: `index.html?roomCode=${roomCode}` } });
    navigator.sendBeacon('/api/send-command', redirectData);
  }
});

waiting_room.html:

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Salon d'attente</title>
  <link rel="stylesheet" href="/static/style.css">
  <link rel="stylesheet" href="/static/mobile_style.css">
  <link rel="icon" type="image/png" href="/static/images/favicon/favicon.png">
  <style>
  </style>
</head>
<body>
  <div class="bg"></div>
  <div class="logo-container">
    <img src="/static/images/logo/logo.png" alt="Party Game Logo" class="logo">
  </div>

  <div class="container">
    <div class="waiting-room">
      <div class="room-info">
        <h2 class="title">Salon d'attente</h2>
        <div class="room-code">
          CODE: <span id="roomCode"></span>
        </div>
      </div>

      <div class="players-grid" id="playersGrid">
        <!-- Les joueurs seront ajout√©s ici dynamiquement -->
      </div>

      <div class="button-container">
        <button type="button" class="button button-secondary" id="leaveButton">Quitter le salon</button>
        <button type="button" class="button button-primary" id="startButton" disabled>
          Lancer la partie (1/8)
        </button>
      </div>
    </div>
  </div>

  <!-- Modal de confirmation (pour quitter le salon) -->
  <div class="modal-overlay" id="confirmationModal">
    <div class="modal-container">
      <h2 class="modal-title">Quitter le Salon ?</h2>
      <div class="modal-content">
        <p id="modalMessage">√ätes-vous s√ªr de vouloir quitter le salon ?</p>
      </div>
      <div class="modal-buttons">
        <button class="modal-button modal-button-secondary" id="cancelButton">Annuler</button>
        <button class="modal-button modal-button-primary" id="confirmButton">Confirmer</button>
      </div>
    </div>
  </div>

  <!-- Overlay de d√©compte -->
  <div class="countdown-overlay" id="countdownOverlay">
    <div class="countdown-content">
      <div id="countdownNumber" class="countdown-number">3</div>
      <button type="button" id="cancelCountdown" class="button button-secondary">Annuler</button>
    </div>
  </div>

  <!-- Javascript -->
  <script type="module" src="Javascript/waiting_room.js"></script>
</body>
</html>